/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package imu_lcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class imu_t implements lcm.lcm.LCMEncodable
{
    public double utc_time;
    public imu_lcm.point mag;
    public imu_lcm.point accel;
    public imu_lcm.point gyro;
    public double pitch;
    public double roll;
    public double yaw;
 
    public imu_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7927d7caf9d2ecedL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(imu_lcm.imu_t.class))
            return 0L;
 
        classes.add(imu_lcm.imu_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + imu_lcm.point._hashRecursive(classes)
             + imu_lcm.point._hashRecursive(classes)
             + imu_lcm.point._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.utc_time); 
 
        this.mag._encodeRecursive(outs); 
 
        this.accel._encodeRecursive(outs); 
 
        this.gyro._encodeRecursive(outs); 
 
        outs.writeDouble(this.pitch); 
 
        outs.writeDouble(this.roll); 
 
        outs.writeDouble(this.yaw); 
 
    }
 
    public imu_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public imu_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static imu_lcm.imu_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        imu_lcm.imu_t o = new imu_lcm.imu_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utc_time = ins.readDouble();
 
        this.mag = imu_lcm.point._decodeRecursiveFactory(ins);
 
        this.accel = imu_lcm.point._decodeRecursiveFactory(ins);
 
        this.gyro = imu_lcm.point._decodeRecursiveFactory(ins);
 
        this.pitch = ins.readDouble();
 
        this.roll = ins.readDouble();
 
        this.yaw = ins.readDouble();
 
    }
 
    public imu_lcm.imu_t copy()
    {
        imu_lcm.imu_t outobj = new imu_lcm.imu_t();
        outobj.utc_time = this.utc_time;
 
        outobj.mag = this.mag.copy();
 
        outobj.accel = this.accel.copy();
 
        outobj.gyro = this.gyro.copy();
 
        outobj.pitch = this.pitch;
 
        outobj.roll = this.roll;
 
        outobj.yaw = this.yaw;
 
        return outobj;
    }
 
}

