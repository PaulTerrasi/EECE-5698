/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package gps_lcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class gps_t implements lcm.lcm.LCMEncodable
{
    public double utc_time;
    public double lat;
    public double lng;
    public double alt;
    public double utm_x;
    public double utm_y;
    public long zone_number;
 
    public gps_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x87d9331d8558baccL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(gps_lcm.gps_t.class))
            return 0L;
 
        classes.add(gps_lcm.gps_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeDouble(this.utc_time); 
 
        outs.writeDouble(this.lat); 
 
        outs.writeDouble(this.lng); 
 
        outs.writeDouble(this.alt); 
 
        outs.writeDouble(this.utm_x); 
 
        outs.writeDouble(this.utm_y); 
 
        outs.writeLong(this.zone_number); 
 
    }
 
    public gps_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public gps_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static gps_lcm.gps_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        gps_lcm.gps_t o = new gps_lcm.gps_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utc_time = ins.readDouble();
 
        this.lat = ins.readDouble();
 
        this.lng = ins.readDouble();
 
        this.alt = ins.readDouble();
 
        this.utm_x = ins.readDouble();
 
        this.utm_y = ins.readDouble();
 
        this.zone_number = ins.readLong();
 
    }
 
    public gps_lcm.gps_t copy()
    {
        gps_lcm.gps_t outobj = new gps_lcm.gps_t();
        outobj.utc_time = this.utc_time;
 
        outobj.lat = this.lat;
 
        outobj.lng = this.lng;
 
        outobj.alt = this.alt;
 
        outobj.utm_x = this.utm_x;
 
        outobj.utm_y = this.utm_y;
 
        outobj.zone_number = this.zone_number;
 
        return outobj;
    }
 
}

